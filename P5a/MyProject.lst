;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 28/02/2018 12:57:07
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF001EF84  	GOTO        776
_interrupt:
;MyProject.c,17 :: 		void interrupt(){
0x0008	0xF018C000  	MOVFF       R0, 24
0x000C	0xF017C001  	MOVFF       R1, 23
0x0010	0xF016C00C  	MOVFF       R12, 22
0x0014	0xF015C00D  	MOVFF       R13, 21
;MyProject.c,18 :: 		key=tecla(); // en la variable key se guarda el valor ASCII de la tecla pulsada
0x0018	0xD90E      	RCALL       _tecla
0x001A	0xF019C000  	MOVFF       R0, _key
;MyProject.c,19 :: 		x=PORTB; // para poder borrar el bit RBIF (define x global)
0x001E	0xF01BCF81  	MOVFF       PORTB, _x
;MyProject.c,20 :: 		INTCON.RBIF=0; // se borra el bit RBIF después de llamar a la función tecla()
0x0022	0x90F2      	BCF         INTCON, 0 
;MyProject.c,21 :: 		Lcd_Chr(1,1,key);
0x0024	0x0E01      	MOVLW       1
0x0026	0x6E1C      	MOVWF       FARG_Lcd_Chr_row 
0x0028	0x0E01      	MOVLW       1
0x002A	0x6E1D      	MOVWF       FARG_Lcd_Chr_column 
0x002C	0xF01EC000  	MOVFF       R0, FARG_Lcd_Chr_out_char
0x0030	0xD882      	RCALL       _Lcd_Chr
;MyProject.c,24 :: 		}
L_end_interrupt:
L__interrupt13:
0x0032	0xF000C018  	MOVFF       24, R0
0x0036	0xF001C017  	MOVFF       23, R1
0x003A	0xF00CC016  	MOVFF       22, R12
0x003E	0xF00DC015  	MOVFF       21, R13
0x0042	0x0011      	RETFIE      1
; end of _interrupt
_Delay_5500us:
;__Lib_Delays.c,31 :: 		void Delay_5500us() {
;__Lib_Delays.c,32 :: 		Delay_us(5500);
0x0044	0x0E0F      	MOVLW       15
0x0046	0x6E0C      	MOVWF       R12, 0
0x0048	0x0E47      	MOVLW       71
0x004A	0x6E0D      	MOVWF       R13, 0
L_Delay_5500us5:
0x004C	0x2E0D      	DECFSZ      R13, 1, 0
0x004E	0xD7FE      	BRA         L_Delay_5500us5
0x0050	0x2E0C      	DECFSZ      R12, 1, 0
0x0052	0xD7FC      	BRA         L_Delay_5500us5
0x0054	0x0000      	NOP
0x0056	0x0000      	NOP
;__Lib_Delays.c,33 :: 		}
L_end_Delay_5500us:
0x0058	0x0012      	RETURN      0
; end of _Delay_5500us
_Delay_1us:
;__Lib_Delays.c,7 :: 		void Delay_1us() {
;__Lib_Delays.c,8 :: 		Delay_us(1);
0x005A	0x0000      	NOP
0x005C	0x0000      	NOP
;__Lib_Delays.c,9 :: 		}
L_end_Delay_1us:
0x005E	0x0012      	RETURN      0
; end of _Delay_1us
_Delay_50us:
;__Lib_Delays.c,19 :: 		void Delay_50us() {
;__Lib_Delays.c,20 :: 		Delay_us(50);
0x0060	0x0E21      	MOVLW       33
0x0062	0x6E0D      	MOVWF       R13, 0
L_Delay_50us2:
0x0064	0x2E0D      	DECFSZ      R13, 1, 0
0x0066	0xD7FE      	BRA         L_Delay_50us2
;__Lib_Delays.c,21 :: 		}
L_end_Delay_50us:
0x0068	0x0012      	RETURN      0
; end of _Delay_50us
_Mul_16X16_U:
;__Lib_Math.c,440 :: 		
;__Lib_Math.c,447 :: 		
0x006A	0x6A0B      	CLRF        R11, 0
;__Lib_Math.c,448 :: 		
0x006C	0x6A0A      	CLRF        R10, 0
;__Lib_Math.c,449 :: 		
0x006E	0x6A09      	CLRF        R9, 0
;__Lib_Math.c,450 :: 		
0x0070	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,451 :: 		
0x0072	0x0204      	MULWF       R4, 0
;__Lib_Math.c,453 :: 		
0x0074	0xF009CFF4  	MOVFF       PRODH, R9
;__Lib_Math.c,454 :: 		
0x0078	0xF008CFF3  	MOVFF       PRODL, R8
;__Lib_Math.c,455 :: 		
0x007C	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,456 :: 		
0x007E	0x0205      	MULWF       R5, 0
;__Lib_Math.c,458 :: 		
0x0080	0xF00BCFF4  	MOVFF       PRODH, R11
;__Lib_Math.c,459 :: 		
0x0084	0xF00ACFF3  	MOVFF       PRODL, R10
;__Lib_Math.c,460 :: 		
0x0088	0x5000      	MOVF        R0, 0, 0
;__Lib_Math.c,461 :: 		
0x008A	0x0205      	MULWF       R5, 0
;__Lib_Math.c,463 :: 		
0x008C	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,464 :: 		
0x008E	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,465 :: 		
0x0090	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,466 :: 		
0x0092	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,467 :: 		
0x0094	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,468 :: 		
0x0096	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,469 :: 		
0x0098	0x5001      	MOVF        R1, 0, 0
;__Lib_Math.c,470 :: 		
0x009A	0x0204      	MULWF       R4, 0
;__Lib_Math.c,472 :: 		
0x009C	0x50F3      	MOVF        PRODL, 0, 0
;__Lib_Math.c,473 :: 		
0x009E	0x2609      	ADDWF       R9, 1, 0
;__Lib_Math.c,474 :: 		
0x00A0	0x50F4      	MOVF        PRODH, 0, 0
;__Lib_Math.c,475 :: 		
0x00A2	0x220A      	ADDWFC      R10, 1, 0
;__Lib_Math.c,476 :: 		
0x00A4	0x6AE8      	CLRF        WREG, 0
;__Lib_Math.c,477 :: 		
0x00A6	0x220B      	ADDWFC      R11, 1, 0
;__Lib_Math.c,479 :: 		
0x00A8	0xF000C008  	MOVFF       R8, R0
;__Lib_Math.c,480 :: 		
0x00AC	0xF001C009  	MOVFF       R9, R1
;__Lib_Math.c,481 :: 		
0x00B0	0xF002C00A  	MOVFF       R10, R2
;__Lib_Math.c,482 :: 		
0x00B4	0xF003C00B  	MOVFF       R11, R3
;__Lib_Math.c,485 :: 		
L_end_Mul_16X16_U:
0x00B8	0x0012      	RETURN      0
; end of _Mul_16X16_U
_Lcd_Cmd:
;__Lib_Lcd.c,18 :: 		
;__Lib_Lcd.c,20 :: 		
0x00BA	0xBE2B      	BTFSC       FARG_Lcd_Cmd_out_char, 7 
0x00BC	0xD002      	BRA         L__Lcd_Cmd21
0x00BE	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00C0	0xD001      	BRA         L__Lcd_Cmd22
L__Lcd_Cmd21:
0x00C2	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd22:
;__Lib_Lcd.c,21 :: 		
0x00C4	0xBC2B      	BTFSC       FARG_Lcd_Cmd_out_char, 6 
0x00C6	0xD002      	BRA         L__Lcd_Cmd23
0x00C8	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x00CA	0xD001      	BRA         L__Lcd_Cmd24
L__Lcd_Cmd23:
0x00CC	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd24:
;__Lib_Lcd.c,22 :: 		
0x00CE	0xBA2B      	BTFSC       FARG_Lcd_Cmd_out_char, 5 
0x00D0	0xD002      	BRA         L__Lcd_Cmd25
0x00D2	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x00D4	0xD001      	BRA         L__Lcd_Cmd26
L__Lcd_Cmd25:
0x00D6	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd26:
;__Lib_Lcd.c,23 :: 		
0x00D8	0xB82B      	BTFSC       FARG_Lcd_Cmd_out_char, 4 
0x00DA	0xD002      	BRA         L__Lcd_Cmd27
0x00DC	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x00DE	0xD001      	BRA         L__Lcd_Cmd28
L__Lcd_Cmd27:
0x00E0	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd28:
;__Lib_Lcd.c,25 :: 		
0x00E2	0xB01A      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
0x00E4	0xD002      	BRA         L__Lcd_Cmd29
0x00E6	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x00E8	0xD001      	BRA         L__Lcd_Cmd30
L__Lcd_Cmd29:
0x00EA	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd30:
;__Lib_Lcd.c,28 :: 		
0x00EC	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,29 :: 		
0x00EE	0xDFB5      	RCALL       _Delay_1us
;__Lib_Lcd.c,30 :: 		
0x00F0	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,33 :: 		
0x00F2	0xB62B      	BTFSC       FARG_Lcd_Cmd_out_char, 3 
0x00F4	0xD002      	BRA         L__Lcd_Cmd31
0x00F6	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
0x00F8	0xD001      	BRA         L__Lcd_Cmd32
L__Lcd_Cmd31:
0x00FA	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
L__Lcd_Cmd32:
;__Lib_Lcd.c,34 :: 		
0x00FC	0xB42B      	BTFSC       FARG_Lcd_Cmd_out_char, 2 
0x00FE	0xD002      	BRA         L__Lcd_Cmd33
0x0100	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
0x0102	0xD001      	BRA         L__Lcd_Cmd34
L__Lcd_Cmd33:
0x0104	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
L__Lcd_Cmd34:
;__Lib_Lcd.c,35 :: 		
0x0106	0xB22B      	BTFSC       FARG_Lcd_Cmd_out_char, 1 
0x0108	0xD002      	BRA         L__Lcd_Cmd35
0x010A	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
0x010C	0xD001      	BRA         L__Lcd_Cmd36
L__Lcd_Cmd35:
0x010E	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
L__Lcd_Cmd36:
;__Lib_Lcd.c,36 :: 		
0x0110	0xB02B      	BTFSC       FARG_Lcd_Cmd_out_char, 0 
0x0112	0xD002      	BRA         L__Lcd_Cmd37
0x0114	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
0x0116	0xD001      	BRA         L__Lcd_Cmd38
L__Lcd_Cmd37:
0x0118	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
L__Lcd_Cmd38:
;__Lib_Lcd.c,38 :: 		
0x011A	0xB01A      	BTFSC       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
0x011C	0xD002      	BRA         L__Lcd_Cmd39
0x011E	0x8483      	BSF         LCD_RS, BitPos(LCD_RS+0) 
0x0120	0xD001      	BRA         L__Lcd_Cmd40
L__Lcd_Cmd39:
0x0122	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
L__Lcd_Cmd40:
;__Lib_Lcd.c,40 :: 		
0x0124	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,41 :: 		
0x0126	0xDF99      	RCALL       _Delay_1us
;__Lib_Lcd.c,42 :: 		
0x0128	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,44 :: 		
0x012A	0xA01A      	BTFSS       __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
0x012C	0xD002      	BRA         L_Lcd_Cmd0
;__Lib_Lcd.c,45 :: 		
0x012E	0xDF8A      	RCALL       _Delay_5500us
0x0130	0xD001      	BRA         L_Lcd_Cmd1
L_Lcd_Cmd0:
;__Lib_Lcd.c,47 :: 		
0x0132	0xDF96      	RCALL       _Delay_50us
L_Lcd_Cmd1:
;__Lib_Lcd.c,48 :: 		
L_end_Lcd_Cmd:
0x0134	0x0012      	RETURN      0
; end of _Lcd_Cmd
_Lcd_Chr:
;__Lib_Lcd.c,65 :: 		
;__Lib_Lcd.c,66 :: 		
0x0136	0xD00F      	BRA         L_Lcd_Chr4
;__Lib_Lcd.c,67 :: 		
L_Lcd_Chr6:
0x0138	0x0E80      	MOVLW       128
0x013A	0x6E1C      	MOVWF       FARG_Lcd_Chr_row 
0x013C	0xD019      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,68 :: 		
L_Lcd_Chr7:
0x013E	0x0EC0      	MOVLW       192
0x0140	0x6E1C      	MOVWF       FARG_Lcd_Chr_row 
0x0142	0xD016      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,69 :: 		
L_Lcd_Chr8:
0x0144	0x0E94      	MOVLW       148
0x0146	0x6E1C      	MOVWF       FARG_Lcd_Chr_row 
0x0148	0xD013      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,70 :: 		
L_Lcd_Chr9:
0x014A	0x0ED4      	MOVLW       212
0x014C	0x6E1C      	MOVWF       FARG_Lcd_Chr_row 
0x014E	0xD010      	BRA         L_Lcd_Chr5
;__Lib_Lcd.c,71 :: 		
L_Lcd_Chr10:
0x0150	0x0E80      	MOVLW       128
0x0152	0x6E1C      	MOVWF       FARG_Lcd_Chr_row 
;__Lib_Lcd.c,72 :: 		
0x0154	0xD00D      	BRA         L_Lcd_Chr5
L_Lcd_Chr4:
0x0156	0x501C      	MOVF        FARG_Lcd_Chr_row, 0 
0x0158	0x0A01      	XORLW       1
0x015A	0xE0EE      	BZ          L_Lcd_Chr6
0x015C	0x501C      	MOVF        FARG_Lcd_Chr_row, 0 
0x015E	0x0A02      	XORLW       2
0x0160	0xE0EE      	BZ          L_Lcd_Chr7
0x0162	0x501C      	MOVF        FARG_Lcd_Chr_row, 0 
0x0164	0x0A03      	XORLW       3
0x0166	0xE0EE      	BZ          L_Lcd_Chr8
0x0168	0x501C      	MOVF        FARG_Lcd_Chr_row, 0 
0x016A	0x0A04      	XORLW       4
0x016C	0xE0EE      	BZ          L_Lcd_Chr9
0x016E	0xD7F0      	BRA         L_Lcd_Chr10
L_Lcd_Chr5:
;__Lib_Lcd.c,74 :: 		
0x0170	0x041D      	DECF        FARG_Lcd_Chr_column, 0 
0x0172	0x6E00      	MOVWF       R0 
0x0174	0x501C      	MOVF        FARG_Lcd_Chr_row, 0 
0x0176	0x2600      	ADDWF       R0, 1 
0x0178	0xF01CC000  	MOVFF       R0, FARG_Lcd_Chr_row
;__Lib_Lcd.c,76 :: 		
0x017C	0x801A      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,77 :: 		
0x017E	0xF02BC000  	MOVFF       R0, FARG_Lcd_Cmd_out_char
0x0182	0xDF9B      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,79 :: 		
0x0184	0x901A      	BCF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,80 :: 		
0x0186	0xF02BC01E  	MOVFF       FARG_Lcd_Chr_out_char, FARG_Lcd_Cmd_out_char
0x018A	0xDF97      	RCALL       _Lcd_Cmd
;__Lib_Lcd.c,81 :: 		
0x018C	0x801A      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,82 :: 		
L_end_Lcd_Chr:
0x018E	0x0012      	RETURN      0
; end of _Lcd_Chr
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0190	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0192	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0196	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0198	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x019A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x019C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x019E	0x0012      	RETURN      0
; end of ___CC2DW
_Lcd_Init:
;__Lib_Lcd.c,84 :: 		
;__Lib_Lcd.c,86 :: 		
0x01A0	0x9695      	BCF         LCD_EN_Direction, BitPos(LCD_EN_Direction+0) 
;__Lib_Lcd.c,87 :: 		
0x01A2	0x9495      	BCF         LCD_RS_Direction, BitPos(LCD_RS_Direction+0) 
;__Lib_Lcd.c,88 :: 		
0x01A4	0x9895      	BCF         LCD_D4_Direction, BitPos(LCD_D4_Direction+0) 
;__Lib_Lcd.c,89 :: 		
0x01A6	0x9A95      	BCF         LCD_D5_Direction, BitPos(LCD_D5_Direction+0) 
;__Lib_Lcd.c,90 :: 		
0x01A8	0x9C95      	BCF         LCD_D6_Direction, BitPos(LCD_D6_Direction+0) 
;__Lib_Lcd.c,91 :: 		
0x01AA	0x9E95      	BCF         LCD_D7_Direction, BitPos(LCD_D7_Direction+0) 
;__Lib_Lcd.c,93 :: 		
0x01AC	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,94 :: 		
0x01AE	0x9483      	BCF         LCD_RS, BitPos(LCD_RS+0) 
;__Lib_Lcd.c,95 :: 		
0x01B0	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,96 :: 		
0x01B2	0x9C83      	BCF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,97 :: 		
0x01B4	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,98 :: 		
0x01B6	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,100 :: 		
0x01B8	0xDF45      	RCALL       _Delay_5500us
;__Lib_Lcd.c,101 :: 		
0x01BA	0xDF44      	RCALL       _Delay_5500us
;__Lib_Lcd.c,102 :: 		
0x01BC	0xDF43      	RCALL       _Delay_5500us
;__Lib_Lcd.c,105 :: 		
0x01BE	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,106 :: 		
0x01C0	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,107 :: 		
0x01C2	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,108 :: 		
0x01C4	0xDF4A      	RCALL       _Delay_1us
;__Lib_Lcd.c,109 :: 		
0x01C6	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,110 :: 		
0x01C8	0xDF3D      	RCALL       _Delay_5500us
;__Lib_Lcd.c,112 :: 		
0x01CA	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,113 :: 		
0x01CC	0xDF46      	RCALL       _Delay_1us
;__Lib_Lcd.c,114 :: 		
0x01CE	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,115 :: 		
0x01D0	0xDF39      	RCALL       _Delay_5500us
;__Lib_Lcd.c,117 :: 		
0x01D2	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,118 :: 		
0x01D4	0xDF42      	RCALL       _Delay_1us
;__Lib_Lcd.c,119 :: 		
0x01D6	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,120 :: 		
0x01D8	0xDF35      	RCALL       _Delay_5500us
;__Lib_Lcd.c,123 :: 		
0x01DA	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,124 :: 		
0x01DC	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,125 :: 		
0x01DE	0xDF3D      	RCALL       _Delay_1us
;__Lib_Lcd.c,126 :: 		
0x01E0	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,127 :: 		
0x01E2	0xDF30      	RCALL       _Delay_5500us
;__Lib_Lcd.c,130 :: 		
0x01E4	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,131 :: 		
0x01E6	0xDF39      	RCALL       _Delay_1us
;__Lib_Lcd.c,132 :: 		
0x01E8	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,134 :: 		
0x01EA	0x9A83      	BCF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,135 :: 		
0x01EC	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,136 :: 		
0x01EE	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,137 :: 		
0x01F0	0xDF34      	RCALL       _Delay_1us
;__Lib_Lcd.c,138 :: 		
0x01F2	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,139 :: 		
0x01F4	0xDF27      	RCALL       _Delay_5500us
;__Lib_Lcd.c,142 :: 		
0x01F6	0x9E83      	BCF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,143 :: 		
0x01F8	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,144 :: 		
0x01FA	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,145 :: 		
0x01FC	0xDF2E      	RCALL       _Delay_1us
;__Lib_Lcd.c,146 :: 		
0x01FE	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,148 :: 		
0x0200	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,149 :: 		
0x0202	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,150 :: 		
0x0204	0xDF2A      	RCALL       _Delay_1us
;__Lib_Lcd.c,151 :: 		
0x0206	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,152 :: 		
0x0208	0xDF1D      	RCALL       _Delay_5500us
;__Lib_Lcd.c,155 :: 		
0x020A	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,156 :: 		
0x020C	0xDF26      	RCALL       _Delay_1us
;__Lib_Lcd.c,157 :: 		
0x020E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,159 :: 		
0x0210	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,160 :: 		
0x0212	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,161 :: 		
0x0214	0xDF22      	RCALL       _Delay_1us
;__Lib_Lcd.c,162 :: 		
0x0216	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,163 :: 		
0x0218	0xDF15      	RCALL       _Delay_5500us
;__Lib_Lcd.c,166 :: 		
0x021A	0x9883      	BCF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,167 :: 		
0x021C	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,168 :: 		
0x021E	0xDF1D      	RCALL       _Delay_1us
;__Lib_Lcd.c,169 :: 		
0x0220	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,171 :: 		
0x0222	0x8E83      	BSF         LCD_D7, BitPos(LCD_D7+0) 
;__Lib_Lcd.c,172 :: 		
0x0224	0x8C83      	BSF         LCD_D6, BitPos(LCD_D6+0) 
;__Lib_Lcd.c,173 :: 		
0x0226	0x8A83      	BSF         LCD_D5, BitPos(LCD_D5+0) 
;__Lib_Lcd.c,174 :: 		
0x0228	0x8883      	BSF         LCD_D4, BitPos(LCD_D4+0) 
;__Lib_Lcd.c,175 :: 		
0x022A	0x8683      	BSF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,176 :: 		
0x022C	0xDF16      	RCALL       _Delay_1us
;__Lib_Lcd.c,177 :: 		
0x022E	0x9683      	BCF         LCD_EN, BitPos(LCD_EN+0) 
;__Lib_Lcd.c,179 :: 		
0x0230	0xDF09      	RCALL       _Delay_5500us
;__Lib_Lcd.c,181 :: 		
0x0232	0x801A      	BSF         __Lib_Lcd_cmd_status, BitPos(__Lib_Lcd_cmd_status+0) 
;__Lib_Lcd.c,182 :: 		
L_end_Lcd_Init:
0x0234	0x0012      	RETURN      0
; end of _Lcd_Init
_tecla:
;tecla12int.h,25 :: 		unsigned char tecla() // Esta funcion devuelve el valor asociado a la tecla
;tecla12int.h,28 :: 		unsigned char columna=0, fila, aux1=0x10, aux2;
0x0236	0x6A1D      	CLRF        tecla_columna_L0 
0x0238	0x0E10      	MOVLW       16
0x023A	0x6E1E      	MOVWF       tecla_aux1_L0 
0x023C	0x0E31      	MOVLW       49
0x023E	0x6E1F      	MOVWF       tecla_teclado_L0 
0x0240	0x0E32      	MOVLW       50
0x0242	0x6E20      	MOVWF       tecla_teclado_L0+1 
0x0244	0x0E33      	MOVLW       51
0x0246	0x6E21      	MOVWF       tecla_teclado_L0+2 
0x0248	0x0E34      	MOVLW       52
0x024A	0x6E22      	MOVWF       tecla_teclado_L0+3 
0x024C	0x0E35      	MOVLW       53
0x024E	0x6E23      	MOVWF       tecla_teclado_L0+4 
0x0250	0x0E36      	MOVLW       54
0x0252	0x6E24      	MOVWF       tecla_teclado_L0+5 
0x0254	0x0E37      	MOVLW       55
0x0256	0x6E25      	MOVWF       tecla_teclado_L0+6 
0x0258	0x0E38      	MOVLW       56
0x025A	0x6E26      	MOVWF       tecla_teclado_L0+7 
0x025C	0x0E39      	MOVLW       57
0x025E	0x6E27      	MOVWF       tecla_teclado_L0+8 
0x0260	0x0E2A      	MOVLW       42
0x0262	0x6E28      	MOVWF       tecla_teclado_L0+9 
0x0264	0x0E30      	MOVLW       48
0x0266	0x6E29      	MOVWF       tecla_teclado_L0+10 
0x0268	0x0E23      	MOVLW       35
0x026A	0x6E2A      	MOVWF       tecla_teclado_L0+11 
;tecla12int.h,32 :: 		delay_ms(Debounce);// antes de empezar a escanear las filas y las columnas se
0x026C	0x0E1A      	MOVLW       26
0x026E	0x6E0C      	MOVWF       R12, 0
0x0270	0x0EF8      	MOVLW       248
0x0272	0x6E0D      	MOVWF       R13, 0
L_tecla0:
0x0274	0x2E0D      	DECFSZ      R13, 1, 0
0x0276	0xD7FE      	BRA         L_tecla0
0x0278	0x2E0C      	DECFSZ      R12, 1, 0
0x027A	0xD7FC      	BRA         L_tecla0
0x027C	0x0000      	NOP
;tecla12int.h,34 :: 		for(fila=0; fila<Rows; fila++) // escaneamos las filas para averiguar la fila
0x027E	0x6A1C      	CLRF        tecla_fila_L0 
L_tecla1:
0x0280	0x0E04      	MOVLW       4
0x0282	0x5C1C      	SUBWF       tecla_fila_L0, 0 
0x0284	0xE20B      	BC          L_tecla2
;tecla12int.h,36 :: 		if((PORTB&aux1)==0x00) break; //en la fila de la tecla pulsada hay un 0 y en
0x0286	0x501E      	MOVF        tecla_aux1_L0, 0 
0x0288	0x1481      	ANDWF       PORTB, 0 
0x028A	0x6E01      	MOVWF       R1 
0x028C	0x5001      	MOVF        R1, 0 
0x028E	0x0A00      	XORLW       0
0x0290	0xE101      	BNZ         L_tecla4
0x0292	0xD004      	BRA         L_tecla2
L_tecla4:
;tecla12int.h,37 :: 		aux1=(aux1<<1);                //las demás hay un 1.
0x0294	0x361E      	RLCF        tecla_aux1_L0, 1 
0x0296	0x901E      	BCF         tecla_aux1_L0, 0 
;tecla12int.h,34 :: 		for(fila=0; fila<Rows; fila++) // escaneamos las filas para averiguar la fila
0x0298	0x2A1C      	INCF        tecla_fila_L0, 1 
;tecla12int.h,38 :: 		}
0x029A	0xD7F2      	BRA         L_tecla1
L_tecla2:
;tecla12int.h,40 :: 		PORTB=0x01; // valor del puerto B para escanear la primera columna (columna=0).
0x029C	0x0E01      	MOVLW       1
0x029E	0x6E81      	MOVWF       PORTB 
;tecla12int.h,42 :: 		while((PORTB&MASK)!=MASK)// se escanean las columnas hasta que se encuentra la
L_tecla5:
0x02A0	0x0EF0      	MOVLW       240
0x02A2	0x1481      	ANDWF       PORTB, 0 
0x02A4	0x6E01      	MOVWF       R1 
0x02A6	0x5001      	MOVF        R1, 0 
0x02A8	0x0AF0      	XORLW       240
0x02AA	0xE008      	BZ          L_tecla6
;tecla12int.h,44 :: 		PORTB=(PORTB<<1);       //caso, las filas estarán todas a 1. Al escanear las
0x02AC	0xF000CF81  	MOVFF       PORTB, R0
0x02B0	0x3600      	RLCF        R0, 1 
0x02B2	0x9000      	BCF         R0, 0 
0x02B4	0xFF81C000  	MOVFF       R0, PORTB
;tecla12int.h,45 :: 		columna++;            //columnas se produce un flanco de subida en el terminal
0x02B8	0x2A1D      	INCF        tecla_columna_L0, 1 
;tecla12int.h,46 :: 		}                      //correspondiente a la fila de la tecla pulsada, lo que
0x02BA	0xD7F2      	BRA         L_tecla5
L_tecla6:
;tecla12int.h,49 :: 		PORTB=0x00; //condiciones del PORTB de espera a que se pulse una nueva tecla
0x02BC	0x6A81      	CLRF        PORTB 
;tecla12int.h,51 :: 		do // esperamos a que se deje de pulsar la tecla para enviar su valor.
L_tecla7:
;tecla12int.h,52 :: 		{delay_ms(2);
0x02BE	0x0E06      	MOVLW       6
0x02C0	0x6E0C      	MOVWF       R12, 0
0x02C2	0x0E30      	MOVLW       48
0x02C4	0x6E0D      	MOVWF       R13, 0
L_tecla10:
0x02C6	0x2E0D      	DECFSZ      R13, 1, 0
0x02C8	0xD7FE      	BRA         L_tecla10
0x02CA	0x2E0C      	DECFSZ      R12, 1, 0
0x02CC	0xD7FC      	BRA         L_tecla10
0x02CE	0x0000      	NOP
;tecla12int.h,53 :: 		}while((PORTB&0xF0)!=0xF0); //Al soltar la tecla, se produce un cambio de nivel
0x02D0	0x0EF0      	MOVLW       240
0x02D2	0x1481      	ANDWF       PORTB, 0 
0x02D4	0x6E01      	MOVWF       R1 
0x02D6	0x5001      	MOVF        R1, 0 
0x02D8	0x0AF0      	XORLW       240
0x02DA	0xE1F1      	BNZ         L_tecla7
;tecla12int.h,57 :: 		aux2=teclado[fila][columna];//devuelve el valor ASCII de la tecla pulsada
0x02DC	0x0E03      	MOVLW       3
0x02DE	0x6E00      	MOVWF       R0 
0x02E0	0x0E00      	MOVLW       0
0x02E2	0x6E01      	MOVWF       R1 
0x02E4	0xF004C01C  	MOVFF       tecla_fila_L0, R4
0x02E8	0x0E00      	MOVLW       0
0x02EA	0x6E05      	MOVWF       R5 
0x02EC	0xDEBE      	RCALL       _Mul_16X16_U
0x02EE	0x0E1F      	MOVLW       tecla_teclado_L0
0x02F0	0x2600      	ADDWF       R0, 1 
0x02F2	0x0E00      	MOVLW       hi_addr(tecla_teclado_L0)
0x02F4	0x2201      	ADDWFC      R1, 1 
0x02F6	0x501D      	MOVF        tecla_columna_L0, 0 
0x02F8	0x2400      	ADDWF       R0, 0 
0x02FA	0x6EE9      	MOVWF       FSR0L 
0x02FC	0x0E00      	MOVLW       0
0x02FE	0x2001      	ADDWFC      R1, 0 
0x0300	0x6EEA      	MOVWF       FSR0H 
;tecla12int.h,58 :: 		return aux2;
0x0302	0xF000CFEE  	MOVFF       POSTINC0, R0
;tecla12int.h,59 :: 		}
L_end_tecla:
0x0306	0x0012      	RETURN      0
; end of _tecla
_main:
;MyProject.c,26 :: 		void main() {
;MyProject.c,28 :: 		TRISB=0xF0; // el nibble alto son entradas y el nibble bajo son salidas
0x0308	0x0EF0      	MOVLW       240
0x030A	0x6E93      	MOVWF       TRISB 
;MyProject.c,29 :: 		PORTB=0;
0x030C	0x6A81      	CLRF        PORTB 
;MyProject.c,31 :: 		INTCON2.RBPU=0; // se habilitan las resistencias de pullup del puerto B
0x030E	0x9EF1      	BCF         INTCON2, 7 
;MyProject.c,32 :: 		x=PORTB; //para poder borrar el RBIF
0x0310	0xF01BCF81  	MOVFF       PORTB, _x
;MyProject.c,33 :: 		INTCON.RBIF=0;
0x0314	0x90F2      	BCF         INTCON, 0 
;MyProject.c,34 :: 		INTCON.RBIE=1;
0x0316	0x86F2      	BSF         INTCON, 3 
;MyProject.c,36 :: 		INTCON.GIE = 1;
0x0318	0x8EF2      	BSF         INTCON, 7 
;MyProject.c,37 :: 		Lcd_Init();
0x031A	0xDF42      	RCALL       _Lcd_Init
;MyProject.c,40 :: 		}
L_end_main:
0x031C	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [60]    _interrupt
0x0044      [22]    _Delay_5500us
0x005A       [6]    _Delay_1us
0x0060      [10]    _Delay_50us
0x006A      [80]    _Mul_16X16_U
0x00BA     [124]    _Lcd_Cmd
0x0136      [90]    _Lcd_Chr
0x0190      [16]    ___CC2DW
0x01A0     [150]    _Lcd_Init
0x0236     [210]    _tecla
0x0308      [22]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    R0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    R1
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    FLASH_Write_8_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    ispunct_rslt_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0002       [1]    R2
0x0002       [2]    __Lib_FT800_alt_memcpy_dd_L0
0x0002       [2]    __Lib_FT810_alt_strlen_cp_L0
0x0002       [2]    memset_pp_L0
0x0002       [1]    FLASH_Write_8_SaveINTCON_L0
0x0002       [2]    __Lib_FT800_alt_strlen_cp_L0
0x0002       [2]    __Lib_FT812_alt_strlen_cp_L0
0x0002       [2]    __Lib_FT812_alt_memcpy_dd_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    __Lib_FT812_alt_memset_pp_L0
0x0002       [2]    __Lib_FT810_alt_memcpy_dd_L0
0x0002       [2]    strlen_cp_L0
0x0002       [2]    __Lib_FT800_alt_memset_pp_L0
0x0002       [2]    __Lib_FT810_alt_memset_pp_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [4]    FT812_Canvas_SurrRect_minX_L0
0x0003       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT29
0x0003       [1]    R3
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [4]    FT800_Canvas_SurrRect_minX_L0
0x0003       [4]    FT810_Canvas_SurrRect_minX_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    memmove_tt_L0
0x0003       [1]    MM_Init_i_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [3]    __Lib_FT810_alt_strlen_const_cp_L0
0x0004       [2]    strncat_cp_L0
0x0004       [3]    __Lib_FT812_alt_strlen_const_cp_L0
0x0004       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT40
0x0004       [2]    __Lib_FT800_alt_memcpy_ss_L0
0x0004       [3]    __Lib_FT800_alt_strlen_const_cp_L0
0x0004       [2]    __Lib_FT810_alt_memcpy_ss_L0
0x0004       [2]    strcpy_cp_L0
0x0004       [1]    R4
0x0004       [2]    frexp_pom_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    __Lib_FT812_alt_memcpy_ss_L0
0x0005       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT54
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [1]    R5
0x0005       [2]    LongWordToHex_input_half_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0006       [1]    __Lib_Sprinti_?FLOC____Lib_Sprinti_Do_FillT69
0x0006       [1]    R6
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [4]    FT810_Canvas_SurrRect_minY_L0
0x0007       [4]    FT812_Canvas_SurrRect_minY_L0
0x0007       [4]    FT800_Canvas_SurrRect_minY_L0
0x0007       [1]    R7
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [4]    FT812_Canvas_SurrRect_maxX_L0
0x000B       [4]    FT810_Canvas_SurrRect_maxX_L0
0x000B       [4]    FT800_Canvas_SurrRect_maxX_L0
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [4]    FT812_Canvas_SurrRect_maxY_L0
0x000F       [1]    R15
0x000F       [4]    FT800_Canvas_SurrRect_maxY_L0
0x000F       [4]    FT810_Canvas_SurrRect_maxY_L0
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0019       [1]    _key
0x001A       [0]    __Lib_Lcd_cmd_status
0x001B       [1]    _x
0x001C       [1]    tecla_fila_L0
0x001C       [1]    FARG_Lcd_Chr_row
0x001D       [1]    FARG_Lcd_Chr_column
0x001D       [1]    tecla_columna_L0
0x001E       [1]    FARG_Lcd_Chr_out_char
0x001E       [1]    tecla_aux1_L0
0x001F      [12]    tecla_teclado_L0
0x002B       [1]    FARG_Lcd_Cmd_out_char
0x0F81       [1]    PORTB
0x0F83       [0]    LCD_D6
0x0F83       [0]    LCD_D5
0x0F83       [0]    LCD_D4
0x0F83       [0]    LCD_D7
0x0F83       [0]    RD4_bit
0x0F83       [0]    RD3_bit
0x0F83       [0]    LCD_RS
0x0F83       [0]    RD7_bit
0x0F83       [0]    RD6_bit
0x0F83       [0]    RD5_bit
0x0F83       [0]    LCD_EN
0x0F83       [0]    RD2_bit
0x0F93       [1]    TRISB
0x0F95       [0]    LCD_D5_Direction
0x0F95       [0]    LCD_D4_Direction
0x0F95       [0]    LCD_RS_Direction
0x0F95       [0]    TRISD5_bit
0x0F95       [0]    TRISD3_bit
0x0F95       [0]    TRISD4_bit
0x0F95       [0]    TRISD7_bit
0x0F95       [0]    LCD_D7_Direction
0x0F95       [0]    TRISD2_bit
0x0F95       [0]    LCD_D6_Direction
0x0F95       [0]    TRISD6_bit
0x0F95       [0]    LCD_EN_Direction
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
